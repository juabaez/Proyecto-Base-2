-- CREEN LAS BASES DE DATOS ANTES DE EJECUTAR EL SCRIPT


-- CREACION DE TABLAS

CREATE TABLE EMPLEADOS(
    EMPLEADOID int NOT NULL,
    NOMBRE char(30) NULL,
    APELLIDO char(30) NULL,
    FECHA_NAC timestamp NULL,
    REPORTA_A int NULL,
    EXTENSION int NULL,
 CONSTRAINT PK_EMPLEADOS PRIMARY KEY (EMPLEADOID));
 
CREATE TABLE PROVEEDORES(
    PROVEEDORID int NOT NULL,
    NOMBREPROV char(50) NOT NULL,
    CONTACTO char(50) NOT NULL,
    CELUPROV char(12) NULL,
    FIJOPROV char(12) NULL,
 CONSTRAINT PK_PROVEEDORES PRIMARY KEY (PROVEEDORID));
 
 CREATE TABLE CATEGORIAS(
    CATEGORIAID int NOT NULL,
    NOMBRECAT char(50) NOT NULL,
 CONSTRAINT PK_CATEGORIAS PRIMARY KEY (CATEGORIAID) );
 
CREATE TABLE CLIENTES(
    CLIENTEID int NOT NULL,
    CEDULA_RUC char(10) NOT NULL,
    NOMBRECIA char(30) NOT NULL,
    NOMBRECONTACTO char(50) NOT NULL,
    DIRECCIONCLI char(50) NOT NULL,
    FAX char(12) NULL,
    EMAIL char(50) NULL,
    CELULAR char(12) NULL,
    FIJO char(12) NULL,
 CONSTRAINT PK_CLIENTES PRIMARY KEY(CLIENTEID) );
 
CREATE TABLE ORDENES(
    ORDENID int NOT NULL,
    EMPLEADOID int NOT NULL,
    CLIENTEID int NOT NULL,
    FECHAORDEN timestamp NOT NULL,
    DESCUENTO int NULL,
 CONSTRAINT PK_ORDENES PRIMARY KEY (ORDENID) );
 
 
CREATE TABLE DETALLE_ORDENES(
    ORDENID int NOT NULL,
    DETALLEID int NOT NULL,
    PRODUCTOID int NOT NULL,
    CANTIDAD int NOT NULL,
 CONSTRAINT PK_DETALLE_ORDENES PRIMARY KEY (ORDENID,DETALLEID));
 
 
CREATE TABLE PRODUCTOS(
    PRODUCTOID int NOT NULL,
    PROVEEDORID int NOT NULL,
    CATEGORIAID int NOT NULL,
    DESCRIPCION char(50) NULL,
    PRECIOUNIT money NOT NULL,
    EXISTENCIA int NOT NULL,
 CONSTRAINT PK_PRODUCTOS PRIMARY KEY (PRODUCTOID)) ;
 
 
 
--AÃ‘ADIR CLAVES FORANEAS
ALTER TABLE ORDENES ADD  CONSTRAINT FK_ORDENES_CLIEN_ORD_CLIENTES FOREIGN KEY(CLIENTEID)
REFERENCES CLIENTES (CLIENTEID);
 
 
ALTER TABLE ORDENES ADD  CONSTRAINT FK_ORDENES_EMPLE_ORD_EMPLEADO FOREIGN KEY(EMPLEADOID)
REFERENCES EMPLEADOS (EMPLEADOID);
 
 
ALTER TABLE DETALLE_ORDENES ADD  CONSTRAINT FK_DETALLE__ORDEN_DET_ORDENES FOREIGN KEY(ORDENID)
REFERENCES ORDENES (ORDENID);
 
 
ALTER TABLE DETALLE_ORDENES ADD  CONSTRAINT FK_DETALLE__PROD_DETA_PRODUCTO FOREIGN KEY(PRODUCTOID)
REFERENCES PRODUCTOS (PRODUCTOID);
 
 
ALTER TABLE PRODUCTOS ADD  CONSTRAINT FK_PRODUCTO_CATE_PROD_CATEGORI FOREIGN KEY(CATEGORIAID)
REFERENCES CATEGORIAS (CATEGORIAID);
 
 
ALTER TABLE PRODUCTOS ADD  CONSTRAINT FK_PRODUCTO_PROV_PROD_PROVEEDO FOREIGN KEY(PROVEEDORID)
REFERENCES PROVEEDORES (PROVEEDORID);
 
ALTER TABLE EMPLEADOS ADD  CONSTRAINT FK_EMPLEADO_REPORTA FOREIGN KEY(REPORTA_A)
REFERENCES EMPLEADOS (EMPLEADOID);

-- todas las ordenes tienen descuento del 20
CREATE OR REPLACE FUNCTION actualizar_DESCUENTO() RETURNS TRIGGER AS $trigger_descuento$
  BEGIN
       NEW.DESCUENTO := 20 ;
       RETURN NEW;
  END;
$trigger_descuento$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_descuento
BEFORE INSERT OR UPDATE ON ORDENES
    FOR EACH ROW EXECUTE PROCEDURE actualizar_DESCUENTO();


--buscar cedula de un cliente
CREATE OR REPLACE FUNCTION retornarClienteCedula(int) RETURNS varchar AS'
BEGIN
    SELECT CLIENTES.CEDULA_RUC from CLIENTES where CLIENTES.CLIENTEID=$1;
END;
'language plpgsql;

CREATE OR REPLACE FUNCTION ejemplo() RETURNS integer AS $$
BEGIN
 RETURN 104;
END;
$$ LANGUAGE plpgsql;



CREATE OR REPLACE FUNCTION ejemplo3() RETURNS integer AS $$
BEGIN
 RETURN 106;
END;
$$ LANGUAGE plpgsql;